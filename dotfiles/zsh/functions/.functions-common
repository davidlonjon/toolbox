# cd + ls  ... and dont forget to add that to completion
cdl() { cd $@; ls -lha }
compdef _cd cdl

# Quick find
qf() {
    echo "find . -iname \"*$1*\""
    find . -iname "*$1*"
}

# Set Term title
precmd () {
  [[ -t 1 ]] || return
  case $TERM in
    *xterm*|rxvt|urxvt|rxvt-256color|rxvt-unicode|(dt|k|E|a)term) print -Pn "\e]2;%n@%m:%~\a"
    ;;
    screen*) print -Pn "\e\"%n@%m:%~\e\134"
  esac
}

# Allow eaiser navigation
# e.g., up -> go up 1 directory
# up 4 -> go up 4 directories
up()
{
    dir=""
    if [[ $1 =~ ^[0-9]+$ ]]; then
        x=0
        while [ $x -lt ${1:-1} ]; do
            dir=${dir}../
            x=$(($x+1))
        done
    else
         dir=..
    fi
    cd "$dir";
}

# Create a new directory and enter it
function mkdircd () {
  mkdir -p "$@" && eval cd "\"\$$#\"";
}

# Create a new directory and enter it
function mkd () {
  mkdir -p "$@" && eval cd "\"\$$#\"";
}

# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar"
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
  )

  local cmd=""
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli"
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz"
    else
      cmd="gzip"
    fi
  fi

  echo "Compressing .tar using \`${cmd}\`…"
  "${cmd}" -v "${tmpFile}" || return 1
  [ -f "${tmpFile}" ] && rm "${tmpFile}"
  echo "${tmpFile}.gz created successfully."
}

# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
  local port="${1:-4000}"
  local ip=$(ipconfig getifaddr en1)
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}"
}

# Install Grunt plugins and add them as `devDependencies` to `package.json`
# Usage: `gi contrib-watch contrib-uglify zopfli`
function gri() {
  local IFS=,
  eval npm install --save-dev grunt-{"$*"}
}

# https://www.gitignore.io/docs
# Get gitingore files
function gi() {
    curl -L -s https://www.gitignore.io/api/"$@"
}

# https://github.com/gf3/dotfiles/blob/master/.functions
# DNS lookup
function digga () {
  dig +nocmd $1 any +multiline +noall +answer
}

# https://github.com/gf3/dotfiles/blob/master/.functions
# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# https://github.com/gf3/dotfiles/blob/master/.functions
# Pretty print JSON
cjson () {
  local url=$(echo $1)
  if [[ "http" == $url[0,4] ]] ; then
    curl --silent $url | python -mjson.tool | pygmentize -O style=monokai -f console256 -g
  else
    cat $url | python -mjson.tool | pygmentize -O style=monokai -f console256 -g
  fi
}

# https://github.com/milomouse/dotfiles/blob/master/zsh/zsh-functions
# copy and follow file(s) to new dir:
function cpf {
  if [[ -d $*[-1] ]]; then
    cp $* && cd $*[-1]
  elif [[ -d ${*[-1]%/*} ]]; then
    cp $* && cd ${*[-1]%/*}
  fi
}

# Taken from http://stackoverflow.com/questions/965663/useful-bash-code-snippets
function bashtips {
cat <<EOF
DIRECTORIES
-----------
~-    Previous working directory
pushd tmp   Push tmp && cd tmp
popd      Pop && cd

GLOBBING AND OUTPUT SUBSTITUTION
--------------------------------
ls a[b-dx]e Globs abe, ace, ade, axe
ls a{c,bl}e Globs ace, able
\$(ls)    \`ls\` (but nestable!)

HISTORY MANIPULATION
--------------------
!!    Last command
!?foo     Last command containing \`foo'
^foo^bar^   Last command containing \`foo', but substitute \`bar'
!!:0      Last command word
!!:^      Last command's first argument
!\$   Last command's last argument
!!:*      Last command's arguments
!!:x-y    Arguments x to y of last command
C-s   search forwards in history
C-r   search backwards in history

LINE EDITING
------------
M-d   kill to end of word
C-w   kill to beginning of word
C-k   kill to end of line
C-u   kill to beginning of line
M-r   revert all modifications to current line
C-]   search forwards in line
M-C-]     search backwards in line
C-t   transpose characters
M-t   transpose words
M-u   uppercase word
M-l   lowercase word
M-c   capitalize word

COMPLETION
----------
M-/   complete filename
M-~   complete user name
M-@   complete host name
M-\$      complete variable name
M-!   complete command name
M-^   complete history
EOF
}

# https://github.com/milomouse/dotfiles/blob/master/zsh/zsh-functions
# move and follow file(s) to new dir:
function mvf {
  if [[ -d $*[-1] ]]; then
    mv $* && cd $*[-1]
  elif [[ -d ${*[-1]%/*} ]]; then
    mv $* && cd ${*[-1]%/*}
  fi
}

# http://serverfault.com/questions/5249/useful-bash-aliases-and-generating-a-listing-of-your-most-used-commands
function fawk {
    first="awk '{print "
    last="}' $2"
    cmd="${first}\$${1}${last}"
    echo $cmd
    eval $cmd
}

# Copy public key to remote machine (dependency-less)
# Taken from http://alias.sh/category/74
function authme() {
  ssh "$1" 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys' \
    < ~/.ssh/id_rsa.pub
}

# For Vagrant, allow reverse port forwarding when ssh
function vsshr () {
  vagrant ssh -- -R $1\:localhost:$1
}

# Search alias
# https://coderwall.com/p/xq-98g
aliass() {
  alias|ack "$*"
}

# Taken from https://github.com/jimeh/dotfiles/blob/master/shell/aliases.sh
# Extract most common archives with single command.
#  - from: http://alias.sh/extract-most-know-archives-one-command
function extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xvjf $1    ;;
        *.tar.gz)    tar xvzf $1    ;;
        *.tar.xz)    tar xvJf $1    ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xvf $1     ;;
        *.tbz2)      tar xvjf $1    ;;
        *.tbz)       tar xvjf $1    ;;
        *.tgz)       tar xvzf $1    ;;
        *.txz)       tar xvJf $1    ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}
alias ext=extract

## -------------------------------------------------------------------
## GIT FUNCTIONS
## -------------------------------------------------------------------

# https://github.com/chrishunt/dot-files/blob/master/.githelpers
function git_weekly_summary() {

  if [[ "$OSTYPE" != 'darwin' ]]; then
    LAST_WEEK=$(date -d '-7day' +%m/%d)
  else
    LAST_WEEK=$(date -v-7d +%m/%d)
  fi

  STATS=$(
    git log --since=1.week --oneline |
    tail -n 1                        |
    awk '{ print $1 }'               |
    xargs git diff --shortstat
  )

  FEATURES=$(
    git log --since=1.week --oneline |
    egrep "Merge (pull|branch) "
  )

  FEATURES_COUNT=$(
    echo "$FEATURES" |
    sed '/^\s*$/d'   |
    wc -l            |
    awk '{ print $1 }'
  )

  echo "Stats ($LAST_WEEK - Today)"
  echo "---------------------"
  echo "$STATS"
  echo
  echo "Features ($FEATURES_COUNT)"
  echo "-------------"
  echo "$FEATURES"
}

# https://github.com/chrishunt/dot-files/blob/master/.githelpers
function git_delete_local_merged_branches() {
  git branch --merged master | grep -v master | xargs git branch -d
}

# https://github.com/chrishunt/dot-files/blob/master/.githelpers
function git_delete_remote_merged_branches() {
  git fetch origin
  git remote prune origin

  for BRANCH in `git branch -r --merged origin/master |\
                 egrep "^\s*origin/"                  |\
                 grep -v master                       |\
                 grep chrishunt                       |\
                 cut -d/ -f2-`
  do
    git push origin :$BRANCH
  done
}

# Generates changelog day by day for all
# http://stackoverflow.com/questions/2976665/git-changelog-day-by-day
function git_changelog_all() {
  NEXT=$(date +%F)
  echo "CHANGELOG"
  echo ----------------------
  git log --no-merges --format="%cd" --date=short | sort -u -r | while read DATE ; do
      echo
      echo [$DATE]
      GIT_PAGER=cat git log --no-merges --format=" * %s" --since=$DATE --until=$NEXT
      NEXT=$DATE
  done
}
alias gcl="git_changelog_all | less"

# Generates changelog day by day for a specific author
# http://stackoverflow.com/questions/2976665/git-changelog-day-by-day
function git_changelog_author() {
  NEXT=$(date +%F)
  AUTHOR=$1
  echo AUTHOR
  echo "CHANGELOG for $AUTHOR"
  echo ----------------------
  git log --no-merges --format="%cd" --date=short | sort -u -r | while read DATE ; do
      echo
      echo [$DATE]
      GIT_PAGER=cat git log --no-merges --format=" * %s" --since=$DATE --until=$NEXT --author=$AUTHOR
      NEXT=$DATE
  done
}

# Generates changelog day by day for me
# http://stackoverflow.com/questions/2976665/git-changelog-day-by-day
function git_changelog_me() {
  NEXT=$(date +%F)
  AUTHOR=$(git config user.name)
  echo AUTHOR
  echo "CHANGELOG for $AUTHOR"
  echo ----------------------
  git log --no-merges --format="%cd" --date=short | sort -u -r | while read DATE ; do
      echo
      echo [$DATE]
      GIT_PAGER=cat git log --no-merges --format=" * %s" --since=$DATE --until=$NEXT --author=$AUTHOR
      NEXT=$DATE
  done
}

alias gclm="git_changelog_me | less"

# Taken from http://stackoverflow.com/questions/2176278/preview-a-git-push/2831135#2831135
function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

function gbin {
    echo branch \($1\) has these commits and \($(parse_git_branch)\) does not
    git log ..$1 --no-merges --format='%h | Author:%an | Date:%ad | %s' --date=local
}

function gbout {
    echo branch \($(parse_git_branch)\) has these commits and \($1\) does not
    git log $1.. --no-merges --format='%h | Author:%an | Date:%ad | %s' --date=local
}

## -------------------------------------------------------------------
## TMUX FUNCTIONS
## -------------------------------------------------------------------
function tmt() {
    [[ -z "$1" ]] && { echo "usage: tmt <session>" >&2; return 1; }
    tmux has -t $1 && tmux attach -t $1 || tmux new -d -s $1 "teamocil $1"
}

function tm() {
    [[ -z "$1" ]] && { echo "usage: tm <session>" >&2; return 1; }
    tmux has -t $1 && tmux attach -t $1 || tmux new -d -s $1
}

function __tmux-sessions() {
    local expl
    local -a sessions
    sessions=( ${${(f)"$(command tmux list-sessions)"}/:[ $'\t']##/:} )
    _describe -t sessions 'sessions' sessions "$@"
}
compdef __tmux-sessions tm

# Kill tmux
function tmux-kill() {
    tmux list-panes -s -F "#{pane_pid} #{pane_current_command}" | grep -v tmux | awk '{print $1}' | xargs kill -9
}

# Get git issue number
function get-git-issue-number() {
    zle -U "$(get_git_issue_number.py)";
}